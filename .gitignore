# Local .terraform directories
# Ignore because contains large provider data (backend configs, module cache)
# Not neccesarily sensitive
.terraform/

# .tfstate files
# Logs which CAN CONTAIN CREDENTIALS.
# If working as a team, team will need access to these. Share outside Git.
# These files need to be lockable. Probably like DySim database blob storage.
# On AWS, no native lock method, need DynamoDB.
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

.env


# Things you don't want to .gitignore
# the Dependency Lock File. .terraform.lock.hcl
# Both providers and modules are updated separately to terraform
# Only providers are locked with this file.
# Stores things like:
# 1. Consistent Provider Versions
# 2.  Avoids Breaking Changes (if terraform gets updated)
